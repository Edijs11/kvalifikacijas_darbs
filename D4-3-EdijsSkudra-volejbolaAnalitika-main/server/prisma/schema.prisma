datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Gender {
  id     Int      @id @default(autoincrement())
  name   String
  Player Player[]
}

model Player {
  id           Int         @id @default(autoincrement())
  firstName    String
  lastName     String
  age          Int
  number       Int
  gender       Gender      @relation(fields: [genderId], references: [id])
  genderId     Int
  team         Team        @relation(fields: [teamId], references: [id])
  teamId       Int
  backupPlayer Boolean     @default(false)
  GameEvent    GameEvent[]
  isDeleted    Boolean     @default(false)
  deletedAt    DateTime?
}

model Team {
  id        Int         @id @default(autoincrement())
  name      String
  players   Player[]
  teamAGame Game[]      @relation("TeamA")
  teamBGame Game[]      @relation("TeamB")
  GameEvent GameEvent[]
  gamesWon  Game[]      @relation("WinningTeam")
  isDeleted Boolean     @default(false)
  deletedAt DateTime?
}

model GameStatus {
  id   Int    @id @default(autoincrement())
  name String
  Game Game[]
}

model GameCategory {
  id   Int    @id @default(autoincrement())
  name String
  Game Game[]
}

model GameEventType {
  id        Int         @id @default(autoincrement())
  name      String
  GameEvent GameEvent[]
}

model PointType {
  id        Int         @id @default(autoincrement())
  name      String
  GameEvent GameEvent[]
}

model MistakeType {
  id        Int         @id @default(autoincrement())
  name      String
  GameEvent GameEvent[]
}

model GameEvent {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  type          GameEventType @relation(fields: [typeId], references: [id])
  team          Team?         @relation(fields: [teamId], references: [id])
  player        Player?       @relation(fields: [playerId], references: [id])
  pointType     PointType?    @relation(fields: [pointTypeId], references: [id])
  mistakeType   MistakeType?  @relation(fields: [mistakeTypeId], references: [id])
  Game          Game          @relation(fields: [gameId], references: [id])
  gameId        Int
  typeId        Int
  teamId        Int?
  playerId      Int?
  pointTypeId   Int?
  mistakeTypeId Int?
  teamAPoints   Int?
  teamBPoints   Int?
}

model Game {
  id             Int          @id @default(autoincrement())
  plannedAt      String
  location       String
  category       GameCategory @relation(fields: [gameCategoryId], references: [id])
  status         GameStatus   @relation(fields: [statusId], references: [id])
  teamA          Team         @relation("TeamA", fields: [teamAId], references: [id])
  teamB          Team         @relation("TeamB", fields: [teamBId], references: [id])
  events         GameEvent[]
  statusId       Int
  gameCategoryId Int
  teamAId        Int
  teamBId        Int
  teamAPoints    Int          @default(0)
  teamBPoints    Int          @default(0)
  teamASets      Int          @default(0)
  teamBSets      Int          @default(0)
  winningTeam    Team?        @relation("WinningTeam", fields: [winningTeamId], references: [id])
  winningTeamId  Int?
  isDeleted      Boolean      @default(false)
  deletedAt      DateTime?
}
